name: Tag, Build and Release

on:
  push:
    branches:
      - master

jobs:
  tag_build_and_release:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest]
        goarch: [amd64, arm64]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Obtener el Ãºltimo tag
        id: get_last_tag
        run: |
          last_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "v1.5.25")
          IFS='.' read -r -a parts <<< "${last_tag//v/}"
          patch=$((parts[2] + 1))
          new_tag="v${parts[0]}.${parts[1]}.$patch"
          echo "New tag: $new_tag"
          echo "::set-output name=new_tag::$new_tag"

      - name: Build binary
        run: |
          mkdir -p build
          if [[ $RUNNER_OS == "macOS" ]]; then
            export CGO_ENABLED=0
            GOARCH=${{ matrix.goarch }} go build -o build/multims_${{ matrix.os }}_${{ matrix.goarch }}
          else
            export CGO_ENABLED=1
            export CC=clang
            export CXX=clang++
            export CGO_CFLAGS="-O -D__BL__=1 -Wno-unused-command-line-argument"
            export CGO_CPPFLAGS="-O -D__BL__=1 -Wno-unused-command-line-argument"
            GOOS=${{ matrix.os }} GOARCH=${{ matrix.goarch }} go build -o build/multims_${{ matrix.os }}_${{ matrix.goarch }}
          fi

      - name: Generate SHA256 Checksums
        run: |
          sha256sum build/* > sha256sums.txt
          cat sha256sums.txt

      - name: Upload binaries
        uses: actions/upload-artifact@v3
        with:
          name: multims-${{ matrix.os }}-${{ matrix.goarch }}
          path: build/multims_${{ matrix.os }}_${{ matrix.goarch }}

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.get_last_tag.outputs.new_tag }}
          files: build/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Print SHA256 for copying
        run: |
          sha256_darwin_amd64=$(grep multims_darwin_amd64 sha256sums.txt | awk '{ print $1 }')
          sha256_darwin_arm64=$(grep multims_darwin_arm64 sha256sums.txt | awk '{ print $1 }')
          sha256_linux_amd64=$(grep multims_linux_amd64 sha256sums.txt | awk '{ print $1 }')
          sha256_linux_arm64=$(grep multims_linux_arm64 sha256sums.txt | awk '{ print $1 }')
    
          echo "SHA256 for multims_darwin_amd64: $sha256_darwin_amd64"
          echo "SHA256 for multims_darwin_arm64: $sha256_darwin_arm64"
          echo "SHA256 for multims_linux_amd64: $sha256_linux_amd64"
          echo "SHA256 for multims_linux_arm64: $sha256_linux_arm64"