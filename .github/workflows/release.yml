name: Tag, Build and Release

on:
  push:
    branches:
      - master

jobs:
  create_tag:
    runs-on: ubuntu-latest
    outputs:
      new_tag: ${{ steps.set_tag.outputs.new_tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Obtener el último tag
        id: set_tag
        run: |
          # Obtener el último tag, si no hay ninguno, comenzar desde v1.5.30
          last_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "v1.5.30")
          
          # Dividir el tag en partes (Mayor.Minor.Patch)
          IFS='.' read -r -a parts <<< "${last_tag//v/}"
          
          # Incrementar la versión del parche (Patch)
          patch=$((parts[2] + 1))
          
          # Construir el nuevo tag
          new_tag="v${parts[0]}.${parts[1]}.$patch"
          
          # Establecer el nuevo tag como salida
          echo "New tag: $new_tag"
          echo "::set-output name=new_tag::$new_tag"

      - name: Create and Push Tag
        run: |
          git config --global user.name "JACKT72xp"
          git config --global user.email "JACKT72xp@users.noreply.github.com"
          git tag ${{ steps.set_tag.outputs.new_tag }}
          git push https://$GITHUB_ACTOR:${{ secrets.PAT_TOKEN }}@github.com/$GITHUB_REPOSITORY.git ${{ steps.set_tag.outputs.new_tag }}

  build:
    needs: create_tag
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        goarch: [amd64, arm64]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.23

      - name: Build binary
        run: |
          mkdir -p build
          GOOS=${{ matrix.os }} GOARCH=${{ matrix.goarch }} go build -o build/multims_${{ matrix.os }}_${{ matrix.goarch }}

      - name: Generate SHA256 Checksums
        run: |
          shasum -a 256 build/* > sha256sums.txt
          cat sha256sums.txt

      - name: Upload binaries
        uses: actions/upload-artifact@v3
        with:
          name: multims-${{ matrix.os }}-${{ matrix.goarch }}
          path: build/multims_${{ matrix.os }}_${{ matrix.goarch }}

  create_release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: multims-ubuntu-latest-amd64
          path: build/
      - uses: actions/download-artifact@v3
        with:
          name: multims-ubuntu-latest-arm64
          path: build/
      - uses: actions/download-artifact@v3
        with:
          name: multims-macos-latest-amd64
          path: build/
      - uses: actions/download-artifact@v3
        with:
          name: multims-macos-latest-arm64
          path: build/

      - name: Generate SHA256 Checksums for all binaries
        run: |
          sha256sum build/* > sha256sums.txt
          cat sha256sums.txt

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.create_tag.outputs.new_tag }}
          files: build/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Print SHA256 for copying
        run: |
          sha256_ubuntu_amd64=$(grep multims_ubuntu-latest_amd64 sha256sums.txt | awk '{ print $1 }')
          sha256_ubuntu_arm64=$(grep multims_ubuntu-latest_arm64 sha256sums.txt | awk '{ print $1 }')
          sha256_macos_amd64=$(grep multims_macos-latest_amd64 sha256sums.txt | awk '{ print $1 }')
          sha256_macos_arm64=$(grep multims_macos-latest_arm64 sha256sums.txt | awk '{ print $1 }')
    
          echo "SHA256 for multims_ubuntu_amd64: $sha256_ubuntu_amd64"
          echo "SHA256 for multims_ubuntu_arm64: $sha256_ubuntu_arm64"
          echo "SHA256 for multims_macos_amd64: $sha256_macos_amd64"
          echo "SHA256 for multims_macos_arm64: $sha256_macos_arm64"