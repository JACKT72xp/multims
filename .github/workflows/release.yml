name: Tag, Build and Release

on:
  push:
    branches:
      - master

jobs:
  tag_and_release:
    runs-on: ubuntu-latest
    outputs:
      new_tag: ${{ steps.get_last_tag.outputs.new_tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Obtener el último tag
        id: get_last_tag
        run: |
          # Asegurarse de que todos los tags estén disponibles en el entorno local
          git fetch --tags
          
          # Obtener todos los tags y ordenarlos numéricamente
          last_tag=$(git tag --sort=-v:refname | head -n 1)
          
          # Si no se encuentra ningún tag, empezar desde v1.5.0
          if [ -z "$last_tag" ]; then
            last_tag="v1.5.0"
          fi
          
          # Dividir el tag en partes
          IFS='.' read -r -a parts <<< "${last_tag/v/}"
          
          # Incrementar la versión del parche
          patch=$((parts[2] + 1))
          
          # Crear un nuevo tag con la versión incrementada
          new_tag="v${parts[0]}.${parts[1]}.$patch"
          
          # Configurar la salida del nuevo tag
          echo "New tag to create: $new_tag"
          echo "new_tag=$new_tag" >> $GITHUB_ENV

      - name: Build and Test
        run: |
          go build ./...
          go test ./...

      - name: Create and Push Tag
        if: ${{ steps.get_last_tag.outputs.new_tag != '' }}
        run: |
          git config --global user.name "JACKT72xp"
          git config --global user.email "JACKT72xp@users.noreply.github.com"
          git tag ${{ steps.get_last_tag.outputs.new_tag }}
          git push https://$GITHUB_ACTOR:${{ secrets.PAT_TOKEN }}@github.com/$GITHUB_REPOSITORY.git ${{ steps.get_last_tag.outputs.new_tag }}
      
  release:
    needs: tag_and_release
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [darwin, linux]
        goarch: [amd64, arm64]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
  
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.23
  
      - name: Install dependencies
        run: |
          go mod download
          go mod tidy
  
      - name: Build binary
        run: |
          mkdir -p build
          GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} go build -o build/multims_${{ matrix.goos }}_${{ matrix.goarch }}
  
      - name: Generate SHA256 Checksums
        run: |
          sha256sum build/* > sha256sums.txt
          cat sha256sums.txt
  
      - name: Upload binaries
        uses: actions/upload-artifact@v3
        with:
          name: multims-${{ matrix.goos }}-${{ matrix.goarch }}
          path: build/multims_${{ matrix.goos }}_${{ matrix.goarch }}
  
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.tag_and_release.outputs.new_tag }}
          files: build/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  
      - name: Print SHA256 for copying
        run: |
          sha256_darwin_amd64=$(grep multims_darwin_amd64 sha256sums.txt | awk '{ print $1 }')
          sha256_darwin_arm64=$(grep multims_darwin_arm64 sha256sums.txt | awk '{ print $1 }')
          sha256_linux_amd64=$(grep multims_linux_amd64 sha256sums.txt | awk '{ print $1 }')
          sha256_linux_arm64=$(grep multims_linux_arm64 sha256sums.txt | awk '{ print $1 }')
    
          echo "SHA256 for multims_darwin_amd64: $sha256_darwin_amd64"
          echo "SHA256 for multims_darwin_arm64: $sha256_darwin_arm64"
          echo "SHA256 for multims_linux_amd64: $sha256_linux_amd64"
          echo "SHA256 for multims_linux_arm64: $sha256_linux_arm64"